fn common_elements( vec1 : &Vec<i32> , vec2 : &Vec<i32> ) -> Vec<i32> {
    let mut new_vec : Vec<i32> = Vec::new();
    
    for num in vec1 {
        if !new_vec.contains(num) {
            new_vec.push(num.clone());
        }
    }
    new_vec.into_iter().filter( |x| vec2.contains(x) ).collect()
}

#[cfg(test)]
mod tests {
    
    use super::*;
    
    #[test]
    fn check_common_elements() {
        let vec1 = vec![ 12 , 1 , 22 , 1 , 32 ];
        let vec2 = vec![ 12 , 1 , 32 , 32 , 32 , 22 ];
        
        assert_eq!( common_elements( &vec1 , &vec2 ) , vec![ 12 , 1 , 22 , 32 ]);
    }
}