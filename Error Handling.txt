// Parse string into float and handle the scenario for unsuccessful parsing

fn parse_to_float( s : &str ) -> Result<f64, Box<dyn std::error::Error>> {
    match s.parse::<f64>() {
        Ok(val) => Ok(val) ,
        Err(_) => Err(("String could not be parsed into float").into())
    }
}

fn main() {
    let x = parse_to_float("hd82");
    println!("{:?}",x);
}
__________________________________________________________________________________________________________________________________________________________________________________________
// Find maximum value in vector while handling the scenario where it is empty

fn get_max<'a>( vec : &'a Vec<i32> ) -> Result<&'a i32, Box<dyn std::error::Error>> {
    if vec.len() == 0 { return Err("vector is empty".into()) }
    Ok(vec.iter().max().unwrap())
}

fn main() {
    let vec : Vec<i32> = vec![];
    let max = get_max(&vec);
    
    println!("{:?}",max);
}
___________________________________________________________________________________________________________________________________________________________________________________________
// Get the value at the nth index of vector and also handle the scenario for index out of bounds

fn get_nth_index<'a,T>( vec : &'a Vec<T> , index : usize ) -> Result<&'a T, Box<dyn std::error::Error>> {
    if let Some(val) = vec.get(index) {
        Ok(val)
    }
    else { Err("index out of bounds".into()) }
}

fn main() {
    let vec = vec!["hello","there","rowdy","ronda"];
    
    println!("{:?}",get_nth_index(&vec,8));
}
___________________________________________________________________________________________________________________________________________________________________________________________
// parse the string to integer and also handle the scenario for parse failure

fn parse_to_int( s : &str ) -> Result<i32, Box<dyn std::error::Error>> {
    match s.parse::<i32>() {
        Ok(val) => Ok(val) ,
        Err(_) => Err("String could not be parsed into integer".into())
    }
}

fn main() {
    println!("{:?}",parse_to_int("19"));
}
___________________________________________________________________________________________________________________________________________________________________________________________
// Perform division of numbers and also handle the scenario where the divisor is zero

fn divide( a : i32 , b : i32 ) -> Result<f32,&'static str> {
    if b == 0 {
        return Err("divide by zero error")
    }
    
    Ok(( a as f32 ) / ( b as f32 ))
}

fn main() {
    
    let result = match divide( 621 , 0 ) {
        Ok(val) => val ,
        Err(error) => { println!("{}",error) ; -1.0 }
    };
    
    println!("{}",result);
}
___________________________________________________________________________________________________________________________________________________________________________________________
// Check if a number is a positive integer and generate error if it is not

use std::io;

fn is_positive( num :i32 ) -> Result<i32, Box<dyn std::error::Error> > {
    if num >= 0 { Ok(num) }
    else { Err("Integer is not Positive".into()) }
}

fn main() {
    let mut num = String::new();
    
    println!("Enter Postive Integer:");
    io::stdin().read_line(&mut num).expect("Somethin went wrong while processing input for positive integer");
    num.pop();
    
    let mut num : i32 = num.trim().parse().unwrap();
    
    println!("{:?}",is_positive(num));
}
___________________________________________________________________________________________________________________________________________________________________________________________
// find index of input element in vector else generate error if element does not exist in vector 

fn find_element<T: std::cmp::PartialOrd>( vec : &Vec<T> , element : T ) -> Result< usize , Box<dyn std::error::Error> > {
    for ( i , v ) in vec.iter().enumerate() {
        if v == &element {
            return Ok(i);
        }
    }
    Err("Element not found in Vector".into())
}

fn main() {
    let vec = vec![ "hello" , "there" , "amanda" , "jake" , "dragon"];
    
    println!("{:?}",find_element( &vec, "jakey" ));
}
____________________________________________________________________________________________________________________________________________________________________________________________
// Divide two floating point integers and generate divide by zero error if the divisor is zero

fn divide( a : f32 , b : f32 ) -> Result<f32, Box<dyn std::error::Error>> {
    
    if b == 0.0 {
        Err("Division by Zero error".into())
    }
    else if (a/b).is_infinite() {
        Err("Overflow occurs from division of numbers".into())
    }
    else if (a/b).is_nan() {
        Err("Underflow occurs from division of numbers".into())
    }
    else {
        Ok(a/b)
    }
}

fn main() {
    let f1 : f32 = 581.44;
    let f2 : f32 = 63.3;
    
    println!("{:?}",divide( f1 , f2 ));
}
____________________________________________________________________________________________________________________________________________________________________________________________
// parse a string and generate sum of all the numbers in it else generate an error if the string cannot be parsed

use regex::Regex;

fn parse( input : String ) -> Result< i128 , Box<dyn std::error::Error > > {
    let mut sum : i128 = 0;
    let numbers = Regex::new("[0-9]+").unwrap();
    let not_digit_or_comma = Regex::new(r#"[^0-9,]"#).unwrap();
    
    if not_digit_or_comma.find(&input).is_some() {
        return Err("Input string cannot be parsed".into());
    }
    
    match ( input.contains(",") , numbers.find(&input).is_some() ) {
        ( false , true ) => {} ,
        ( true , true ) => {},
        ( _ , _ ) => return Err("Input string cannot be parsed".into())
    };
    
    for num in input.split(",") {
        sum += num.trim().parse::<i128>().unwrap()
    }
    
    if sum > 9223372036854775807 {
        Err("Sum exceeds the range of i64 values".into())
    }
    else { Ok(sum) }
}

fn main() {
    println!("{:?}",parse("83,73,â‚©".to_string()));
}