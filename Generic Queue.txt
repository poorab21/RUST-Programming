struct Queue<T> where T : std::fmt::Debug {
    data : Vec<T> 
}

impl<T> Queue<T> where T : std::fmt::Debug {
    fn new() -> Self {
        Self {
            data : Vec::new()
        }
    }
    
    fn enqueue( &mut self , val : T ) {
        self.data.push(val);
    }
    
    fn dequeue( &mut self ) -> T {
        self.data.remove(0)
    }
    
    fn peek( &self ) {
        println!("{:?}",self.data);
    }
}

fn main() {
    let mut queue1 = Queue::new();
    
    queue1.enqueue('x');
    queue1.enqueue('c');
    queue1.enqueue('a');
    queue1.peek();
    println!("{} removed",queue1.dequeue());
    println!("{} removed",queue1.dequeue());
    queue1.peek();
    println!("{} removed",queue1.dequeue());
    queue1.peek();
}