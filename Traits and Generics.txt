// Drawable trait example ( including trait method with default implementation )

pub trait Drawable {
    fn draw(&self);
    fn default_func(&self) {
        println!("default function called");
    }
}

impl Drawable for i32 {
    fn draw(&self) {
        println!("draw() function called for value of type i32");
    }
}

fn main() {
    let x : i32 = 12;
    x.draw();
    x.default_func();
}
___________________________________________________________________________________________________________________________________________________________________________________________
// Drawable trait implementation for Rectangle struct

pub trait Drawable {
    fn draw();
}

#[derive(Debug)]
struct Rectangle {
    width : u32 , 
    height : u32
}

impl Rectangle {
    fn new( width : u32 , height : u32 ) -> Self {
        Self {
            width , 
            height
        }
    }
    
    fn width( &self ) -> u32 {
        self.width
    }
    
    fn height( &self ) -> u32 {
        self.height
    }
    
    fn set_height( &mut self , height : u32 ) {
        self.height = height;
    }
    
    fn set_width( &mut self , width : u32 ) {
        self.width = width;
    }
    
    fn display(&self) {
        println!("{:#?}",self);
    }
}

impl Drawable for Rectangle {
    fn draw() {
        println!("draw rectangle");
    }
}

fn main() {
    let mut rec1 = Rectangle::new(3,7);
    rec1.set_width(71);
    rec1.set_height(9);
    rec1.display();
    Rectangle::draw();
}
__________________________________________________________________________________________________________________________________________________________________________________________
// Drawable trait for struct Circle 

pub trait Drawable {
    fn draw();
}

#[derive(Debug)]
struct Circle {
    radius : u32
}

impl Drawable for Circle {
    fn draw() {
        println!("Draw circle");
    }
}

impl Circle {
    fn new( radius : u32 ) -> Self {
        Self {
            radius
        }
    }
    
    fn radius( &self ) -> u32 {
        self.radius
    }
    
    fn set_radius( &mut self , radius : u32 ) {
        self.radius = radius;
    }
    
    fn display(&self) {
        println!("{:#?}",self);
    }
}

fn main() {
    let mut circle1 = Circle::new(6);
    
    circle1.set_radius(98);
    
    circle1.display();
    Circle::draw();
}
________________________________________________________________________________________________________________________________________________________________________________________
// Drawable trait for Rectangle and i32 type

pub trait Drawable {
    fn draw(&self) {
        println!("draw shape");
    }
}

struct Rectangle {
    width : u32 , 
    height : u32
}

impl Drawable for Rectangle {
    fn draw(&self) {
        println!("draw rectangle");
    }
}

impl Rectangle {
    fn new( width : u32 , height : u32 ) -> Self {
        Self {
            width ,
            height
        }
    }
    
    fn width( &self ) -> u32 {
        self.width
    }
    
    fn height( &self ) -> u32 {
        self.height
    }
    
    fn set_width( &mut self , width : u32 ) {
        self.width = width;
    }
    
    fn set_height( &mut self , height : u32 ) {
        self.height = height;
    }
}

impl Drawable for i32 {
    fn draw(&self) {
        println!("draw shape for i32");
    }
}

fn draw_shapes<T : Drawable>( shapes : Vec<T> ) {
    for shape in &shapes {
        shape.draw();
    }
}

fn main() {
    let shapes = vec![ 
        43 , 
        81 , 
        98
    ];
    
    draw_shapes( shapes );
    
    let shapes2 = vec![
        Rectangle::new(9,8) ,
        Rectangle::new(18,7) ,
    ];
    
    draw_shapes ( shapes2 );
}
___________________________________________________________________________________________________________________________________________________________________________________________
// Drawable and Area trait for Rectangle and Circle type

pub trait Drawable {
    fn draw(&self);
}

pub trait Area {
    fn calculate_area(&self) -> f32;
}

struct Rectangle {
    width : f32 ,
    height : f32
}

struct Circle {
    radius : f32 
}

impl  Circle {
    fn new( radius : f32 ) -> Self {
        Self {
            radius
        }
    }
    
    fn radius( &self ) -> f32 {
        self.radius
    }
    
    fn set_radius( &mut self , radius : f32 ) {
        self.radius = radius;
    }
}

impl Drawable for Circle {
    fn draw(&self) {
        println!("draw circle of radius {}",self.radius);
    }
}

impl Area for Circle {
    fn calculate_area( &self ) -> f32 {
        self.radius * self.radius * 3.14_f32
    }
}

impl Drawable for Rectangle {
    fn draw(&self) {
        println!("draw rectangle of width {} and height {}",self.width,self.height);
    }
}

impl Area for Rectangle {
    fn calculate_area( &self ) -> f32 {
        self.width * self.height
    }
}

impl Rectangle {
    fn new( width : f32 , height : f32 ) -> Self {
        Self {
            width ,
            height
        }
    }
    
    fn width( &self ) -> f32 {
        self.width
    }
    
    fn height( &self ) -> f32 {
        self.height
    }
    
    fn set_width( &mut self , width : f32 ) {
        self.width = width;
    }
    
    fn set_height( &mut self , height : f32 ) {
        self.height = height;
    }
}

fn main() {
    let mut rec1 = Rectangle::new( 13.5 , 18.5 );
    rec1.set_width(65.5);
    rec1.set_height(55.9);
    
    let mut circle1 = Circle::new( 6.8 );
    circle1.set_radius(8.2);
    
    circle1.draw();
    rec1.draw();
    println!("{}",circle1.calculate_area());
    println!("{}",rec1.calculate_area());
}
_______________________________________________________________________________________________________________________________________________________________________________________
// Drawable and Area trait for Rectangle and Circle type (example 2)

pub trait Drawable {
    fn draw(&self);
}

pub trait Area {
    fn calculate_area(&self) -> f32;
}

struct Rectangle {
    width : f32 ,
    height : f32
}

struct Circle {
    radius : f32 
}

impl  Circle {
    fn new( radius : f32 ) -> Self {
        Self {
            radius
        }
    }
    
    fn radius( &self ) -> f32 {
        self.radius
    }
    
    fn set_radius( &mut self , radius : f32 ) {
        self.radius = radius;
    }
}

impl Drawable for Circle {
    fn draw(&self) {
        println!("draw circle of radius {}",self.radius);
    }
}

impl Area for Circle {
    fn calculate_area( &self ) -> f32 {
        self.radius * self.radius * 3.14_f32
    }
}

impl Drawable for Rectangle {
    fn draw(&self) {
        println!("draw rectangle of width {} and height {}",self.width,self.height);
    }
}

impl Area for Rectangle {
    fn calculate_area( &self ) -> f32 {
        self.width * self.height
    }
}

impl Rectangle {
    fn new( width : f32 , height : f32 ) -> Self {
        Self {
            width ,
            height
        }
    }
    
    fn width( &self ) -> f32 {
        self.width
    }
    
    fn height( &self ) -> f32 {
        self.height
    }
    
    fn set_width( &mut self , width : f32 ) {
        self.width = width;
    }
    
    fn set_height( &mut self , height : f32 ) {
        self.height = height;
    }
}

fn calculate_total_areas<T: Area>( shapes : Vec<T> ) -> f32 {
    shapes.iter().map( |x| x.calculate_area() ).sum()
}

fn main() {
    //let mut rec1 = Rectangle::new( 13.5 , 18.5 );
    //rec1.set_width(65.5);
   // rec1.set_height(55.9);
    
    //let mut rec2 = Rectangle::new( 7.4 , 18.3 );

    //let shapes = vec![ rec1 , rec2 ];
   // println!("{}",calculate_total_areas(shapes));
    
    let circle1 = Circle::new(8.9);
    let circle2 = Circle::new(81.3);
    let circle3 = Circle::new(55.5);
    
    println!("{}",circle1.calculate_area());
    println!("{}",circle2.calculate_area());
    println!("{}",circle3.calculate_area());
    
    println!("{}",calculate_total_areas( vec![ circle1 , circle2 , circle3 ] ));
}
_______________________________________________________________________________________________________________________________________________________________________________________
// Printable trait for String, i32 and u32 type

pub trait Printable {
    fn print(&self);
}

impl Printable for String {
    fn print(&self) {
        println!("{}",self);
    }
} 

impl Printable for u32 {
    fn print(&self) {
        println!("{}",self);
    }
}

impl Printable for i32 {
    fn print(&self) {
        println!("{}",self);
    }
}

fn main() {
    let mut x : i32 = 65;
    let mut s = String::from("hello");
    let mut c : u32 = 18;
    
    s.push_str(" there");
    x = 98;
    
    c.print();
    x.print();
    s.print();
}
______________________________________________________________________________________________________________________________________________________________________________________
// Sortable trait for String and u32 vectors

trait Sortable {
    fn sort( &mut self );
}

impl Sortable for Vec<String> {
    fn sort( &mut self ) {
        println!("sort() function from Sortable called");
        let mut temp_vec = self.iter().map( |val| val.as_str() ).collect::<Vec<&str>>();
        temp_vec.sort();
        *self = temp_vec.iter().map( |val| val.to_string() ).collect::<Vec<String>>();
    }
}

impl Sortable for Vec<u32> {
    fn sort( &mut self ) {
        println!("sort() function from Sortable called");
        let mut temp_vec : Vec<u64> = self.iter().map( |val| *val as u64 ).collect();
        temp_vec.sort();
        *self = temp_vec.iter().map( |val| *val as u32 ).collect();
    }
}

fn main() {
    
    let mut v1 = vec![
        "hello".to_string() ,
        "there".to_string() ,
        "ok".to_string() , 
        "axios".to_string()
    ];
    
    v1.sort();
    println!("{:?}",v1);
    
    let mut v2 = vec![
        65u32 ,
        187u32 ,
        87u32 ,
        100u32
    ];
    
    v2.sort();
    println!("{:?}",v2);
}
_____________________________________________________________________________________________________________________________________________________________________________________
// Resizable trait for Rectangle type

trait Resizable {
    fn resize( &mut self , scale : f64 );
}

#[derive(Debug)]

struct Rectangle {
    width : f64 , 
    height : f64
}

impl Rectangle {
    fn new( width : f64 , height : f64 ) -> Self {
        Self {
            width , 
            height
        }
    }
    
    fn width( &self ) -> f64 {
        self.width
    }
    
    fn height( &self ) -> f64 {
        self.height
    }
    
    fn set_width( &mut self , width : f64 ) {
        self.width = width;
    }
    
    fn set_height( &mut self , height : f64 ) {
        self.height = height;
    }
} 

impl Resizable for Rectangle {
    fn resize( &mut self, scale : f64 ) {
        self.width += scale;
        self.height += scale;
    }
}

fn main() {
    let mut rec1 = Rectangle::new(7.5,9.8);
    rec1.set_width(17.5);
    rec1.set_height(76.44);
    
    rec1.resize(14.83);
    println!("{:#?}",rec1);
}
___________________________________________________________________________________________________________________________________________________________________________________________
// Print only if Option<T> has numeric value

use std::any::type_name;

fn type_of<T>( _ : T ) -> &'static str {
    &type_name::<T>()[0..]
}

fn print<T: std::fmt::Display + std::cmp::PartialOrd + Clone>( val : Option<T> ) {
    let type_of_val = type_of(val.clone().unwrap());
    if type_of_val == "u32" || type_of_val == "u16" || type_of_val == "u64" || type_of_val == "u8" || type_of_val == "i32" || type_of_val == "i16" || type_of_val == "i64" || type_of_val == "i8" || type_of_val == "f32" || type_of_val == "f64" {
        println!("{}",val.unwrap());
    }
}

fn main() {
    print(Some(6));
}
___________________________________________________________________________________________________________________________________________________________________________________________
// Area and Resizable trait for Rectangle type

pub trait Area {
    fn calculate_area(&self) -> f64;
}

pub trait Resizable {
    fn resize( &mut self , scale : f64 );
}

#[derive(Debug)]

struct Rectangle {
    width : f64 , 
    height : f64
}

impl Area for Rectangle {
    fn calculate_area( &self ) -> f64 {
        self.width * self.height
    }
}

impl Resizable for Rectangle {
    fn resize( &mut self , scale : f64 ) {
        self.width += scale;
        self.height += scale;
    }
} 

fn scale_shape<T: Resizable + Area>( val : &mut T ) {
    println!("Area = {}",val.calculate_area());
    val.resize(6.2);
}

fn main() {
    let mut rec1 = Rectangle {
        width : 63.3 ,
        height : 87.2
    };
    
    scale_shape( &mut rec1 );
    println!("{:?}",rec1);
}