use std::thread::{ self , JoinHandle };
use std::sync::{ Arc , Mutex };
use rand::Rng;

fn main() {
    let mut queue = Arc::new( Mutex::new( Vec::<u32>::new() ) );
    let mut handles : Vec<JoinHandle<()>> = Vec::new();
    
    for _ in 0..10 {
        let queue_access = Arc::clone( &queue );
        
        let handle = thread::spawn(
            move || {
                let mut q = queue_access.lock();
                
                if let Ok(mut queue) = q {
                    let val = rand::thread_rng().gen_range( 1..300 );
                    queue.push(val);
                    println!("Producer thread pushed {val} into the queue");
                }
            }
        );
        
        handles.push(handle);
    }
    
    for _ in 0..10 {
        let queue_access = Arc::clone( &queue );
        
        let handle = thread::spawn(
            move || {
                let mut q = queue_access.lock();
                
                if let Ok(mut queue) = q {
                   if queue.len() > 0 { println!("Consumer thread consumed {}",queue.remove(0)); }
                   else { println!("Consumer thread could not find value to consume"); }
                }
            }
        );
        handles.push(handle);
    }
    
    for handle in handles {
        handle.join().unwrap();
    }
}