use rand::Rng;
use rand;

fn generate_password( length : usize ) -> String {
    let mut random = rand::thread_rng();
    let mut password = String::new();
    let limit = 10;
    let mut iteration = 0;
    
    for i in 0..length {
        let mut n = random.gen_range(65..=122);
        iteration = 0;
        
        while n >= 91 && n <= 96 && iteration < limit {
            n = random.gen_range(65..=122);
            iteration += 1;
        }
        
        if iteration == limit { password += "a"; continue; } 
        
        password += format!(r"{}",(n as u8) as char).as_str();
    }
    password
}

#[cfg(test)]
mod test {
    
    use super::*;
    
    #[test]
    fn check_generate_password() {
        let n = 27;
        let password = generate_password(n).len();
        assert_eq!( n , password , "generate_password({n}) generated a password of {password} length" );
    }
}